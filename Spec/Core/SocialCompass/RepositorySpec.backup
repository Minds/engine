<?php

namespace Spec\Minds\Core\SocialCompass;

use Cassandra\Bigint;
use Minds\Core\Data\Cassandra\Client;
use Minds\Core\Data\Cassandra\Prepared\Custom;
use Minds\Core\SocialCompass\Repository;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;
use Spec\Minds\Mocks\Cassandra\Rows;

class RepositorySpec extends ObjectBehavior
{
    public function it_is_initializable()
    {
        $this->shouldHaveType(Repository::class);
    }

    public function it_should_get_answers_and_return_iterable_if_entries_found(
        Client $cql
    )
    {
        $cql
            ->request(Argument::that(function (Custom $query){
                return [
                    'string' => "SELECT *
                        FROM
                            minds.social_compass_answers
                        WHERE
                            user_guid = ?",
                    'values' => [
                        new Bigint(1)
                    ]
                ];
            }))
            ->shouldBeCalled()
            ->willReturn(new Rows([
                [
                    'user_id' => new Bigint(1),
                    'question_id' => 'EstablishmentQuestion',
                    'value' => 50
                ]
            ], ""));
        $this->beConstructedWith($cql->getWrappedObject());

        $result = $this->getAnswers(1);
        $result->shouldBeIterable();
    }

    public function getMatchers(): array
    {
        return [
            "beIterable" => function ($subject) {
                return is_iterable($subject);
            }
        ];
    }
}
