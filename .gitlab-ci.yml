image: minds/php:latest

services:
  - docker:dind

stages:
  - build
  - test
  - prepare
  - review
  - deploy:staging
  - deploy:canary
  - deploy:production

cache:
  paths:
    - vendor
    - bin
  policy: pull

build:
  stage: build
  script:
    - apk update && apk add --no-cache git
    - sh tools/setup.sh
  cache:
    paths:
      - vendor
      - bin
    policy: push

test:
  stage: test
  image: minds/php-tests:latest
  script:
    - bin/phpspec run

prepare:fpm:
  stage: prepare
  image: minds/ci:latest
  script:
    - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY} 
    - |
      docker build \
        -t $CI_REGISTRY_IMAGE/fpm:$CI_BUILD_REF \
        -f containers/php-fpm/Dockerfile \
        --build-arg MINDS_VERSION=$CI_BUILD_REF \
        --build-arg SENTRY_DSN=$SENTRY_DSN \
        .
    - docker push $CI_REGISTRY_IMAGE/fpm:$CI_BUILD_REF

prepare:runners:
  stage: prepare
  image: minds/ci:latest
  script:
    - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}
    - |
      docker build \
        -t $CI_REGISTRY_IMAGE/runners:$CI_BUILD_REF \
        -f containers/php-runners/Dockerfile \
        --build-arg MINDS_VERSION=$CI_BUILD_REF \
        --build-arg SENTRY_DSN=$SENTRY_DSN \
        .
    - docker push $CI_REGISTRY_IMAGE/runners:$CI_BUILD_REF

prepare:all:sentry:
  stage: prepare
  image: getsentry/sentry-cli
  script:
    - echo "Create a new release $CI_COMMIT_SHA"
    - sentry-cli releases new $CI_COMMIT_SHA
    - sentry-cli releases set-commits --auto $CI_COMMIT_SHA
    - sentry-cli releases finalize $CI_COMMIT_SHA
    - echo "Finalized release for $CI_COMMIT_SHA"

review:start:
  stage: review
  image: minds/helm-eks:latest
  script:
    - aws eks update-kubeconfig --name=sandbox
    - git clone --branch=sandbox-wip https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/minds/helm-charts.git
    - "helm upgrade \
        --install \
        --reuse-values \
        --set phpfpm.image.repository=$CI_REGISTRY_IMAGE/fpm \
        --set phpfpm.image.tag=$CI_BUILD_REF \
        --set runners.image.repository=$CI_REGISTRY_IMAGE/runners \
        --set runners.image.tag=$CI_BUILD_REF \
        --set domain=$CI_BUILD_REF_SLUG.$KUBE_INGRESS_BASE_DOMAIN \
        --set elasticsearch.clusterName=$CI_BUILD_REF_SLUG-elasticsearch \
        --wait \
        $CI_BUILD_REF_SLUG \
        ./helm-charts/minds"
    - sentry-cli releases deploys $CI_COMMIT_SHA new -e review-$CI_COMMIT_REF_SLUG
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://$CI_BUILD_REF_SLUG.$KUBE_INGRESS_BASE_DOMAIN
    on_stop: review:stop
  except: 
    refs:
      - master
      - test/gitlab-ci

review:stop:
  stage: review
  image: minds/helm-eks:latest
  script:
    - aws eks update-kubeconfig --name=sandbox
    - helm del --purge $CI_BUILD_REF_SLUG
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://$CI_BUILD_REF_SLUG.$KUBE_INGRESS_BASE_DOMAIN
    action: stop
  variables:
    GIT_STRATEGY: none
  when: manual
  except: 
    refs:
      - master
      - test/gitlab-ci

staging:fpm:
  stage: deploy:staging
  image: minds/ci:latest
  script:
    - IMAGE_LABEL="staging"
    - $(aws ecr get-login --no-include-email --region us-east-1)
    - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}
    - docker pull $CI_REGISTRY_IMAGE/fpm:$CI_BUILD_REF
    # Push to AWS registry
    - docker tag $CI_REGISTRY_IMAGE/fpm:$CI_BUILD_REF $ECR_REPOSITORY_URL_FPM:$IMAGE_LABEL
    - docker push $ECR_REPOSITORY_URL_FPM:$IMAGE_LABEL
    # Push to Gitlab registry
    - docker tag $CI_REGISTRY_IMAGE/fpm:$CI_BUILD_REF $CI_REGISTRY_IMAGE/fpm:$IMAGE_LABEL
    - docker push $CI_REGISTRY_IMAGE/fpm:$IMAGE_LABEL
    # Deploy to staging
    - aws ecs update-service --service=$ECS_APP_STAGING_SERVICE --force-new-deployment --region us-east-1 --cluster=$ECS_CLUSTER
    # Update sentry
    - sentry-cli releases deploys $CI_COMMIT_SHA new -e $IMAGE_LABEL
  environment:
    name: staging
    url: https://www.minds.com/?staging=1
  only: 
    refs:
      - master
      - test/gitlab-ci

canary:fpm:
  stage: deploy:canary
  image: minds/ci:latest
  script:
    - IMAGE_LABEL="canary"
    - $(aws ecr get-login --no-include-email --region us-east-1)
    - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}
    - docker pull $CI_REGISTRY_IMAGE/fpm:$CI_BUILD_REF
    # Push to AWS registry
    - docker tag $CI_REGISTRY_IMAGE/fpm:$CI_BUILD_REF $ECR_REPOSITORY_URL_FPM:$IMAGE_LABEL
    - docker push $ECR_REPOSITORY_URL_FPM:$IMAGE_LABEL
    # Push to Gitlab registry
    - docker tag $CI_REGISTRY_IMAGE/fpm:$CI_BUILD_REF $CI_REGISTRY_IMAGE/fpm:$IMAGE_LABEL
    - docker push $CI_REGISTRY_IMAGE/fpm:$IMAGE_LABEL
    # Deploy to ECS
    - aws ecs update-service --service=$ECS_APP_CANARY_SERVICE --force-new-deployment --region us-east-1 --cluster=$ECS_CLUSTER
    # Update sentry
    - sentry-cli releases deploys $CI_COMMIT_SHA new -e $IMAGE_LABEL
  only:
    refs:
      - master
      - test/gitlab-ci
  environment:
    name: canary
    url: https://www.minds.com/?canary=1 # requires canary cookie
  when: manual
  allow_failure: false # prevents auto deploy to full production

production:fpm:
  stage: deploy:production
  image: minds/ci:latest
  script:
    - IMAGE_LABEL="production"
    - $(aws ecr get-login --no-include-email --region us-east-1)
    - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}
    - docker pull $CI_REGISTRY_IMAGE/fpm:$CI_BUILD_REF
    # Push to AWS registry
    - docker tag $CI_REGISTRY_IMAGE/fpm:$CI_BUILD_REF $ECR_REPOSITORY_URL_FPM:$IMAGE_LABEL
    - docker push $ECR_REPOSITORY_URL_FPM:$IMAGE_LABEL
    # Push to Gitlab registry
    - docker tag $CI_REGISTRY_IMAGE/fpm:$CI_BUILD_REF $CI_REGISTRY_IMAGE/fpm:$IMAGE_LABEL
    - docker push $CI_REGISTRY_IMAGE/fpm:$IMAGE_LABEL
    # Delpoy to ECS
    - aws ecs update-service --service=$ECS_APP_PRODUCTION_SERVICE --force-new-deployment --region us-east-1 --cluster=$ECS_CLUSTER
    # Update sentry
    - sentry-cli releases deploys $CI_COMMIT_SHA new -e $IMAGE_LABEL
  only:
    refs:
      - master
      - test/gitlab-ci
  environment:
    name: production
    url: https://www.minds.com/
  when: delayed
  start_in: 2 hours # reduce? can always be deployed manually earlier too

production:runners:
  stage: deploy:production
  image: minds/ci:latest
  script:
    - IMAGE_LABEL="production"
    - $(aws ecr get-login --no-include-email --region us-east-1)
    - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}
    - docker pull $CI_REGISTRY_IMAGE/runners:$CI_BUILD_REF
    # Push to production register
    - docker tag $CI_REGISTRY_IMAGE/runners:$CI_BUILD_REF $ECR_REPOSITORY_URL_RUNNERS:$IMAGE_LABEL
    - docker push $ECR_REPOSITORY_URL_RUNNERS:$IMAGE_LABEL
    # Push gitlab registry
    - docker tag $CI_REGISTRY_IMAGE/runners:$CI_BUILD_REF $CI_REGISTRY_IMAGE/runners:$IMAGE_LABEL
    - docker push $CI_REGISTRY_IMAGE/runners:$IMAGE_LABEL
    - aws ecs update-service --service=$ECS_RUNNERS_PRODUCTION_SERVICE --force-new-deployment --region us-east-1 --cluster=$ECS_CLUSTER
  only:
    refs:
      - master
      - test/gitlab-ci
  environment:
    name: production
    url: https://www.minds.com/
